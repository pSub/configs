#!/bin/sh

# This script helps to create backups with rsnapshot
# in a regular manner. It is typically called from
# ~/.xinitrc.
#
# The user is prompted to run a backup if a file
# ~/.$INTERVAL-backup exists in his $HOME directory.
# $INTERVAL needs to be a name from the array
# `intervals' defined above. This file is removed after
# the backup was created successfully.
#
# Typically such files are create via a cronjob.
#
# Example cronjobs:
#
#   @daily ID=daily-backup /usr/bin/touch $HOME/.backup-daily
#   @weekly ID=weekly-backup /usr/bin/touch $HOME/.backup-weekly
#

# The Backup intervals in use.
# These need to be a subset of the intervals defined in the rsnapshot
# configuration.
intervals=(weekly)


# This is an interactive function that helps to create a backup.
# The user is prompted for all credentials.
# The function takes exactly on parameter, namely the interval.
createBackup(){
echo -n "Create a $1 backup NOW? [yn] "

while [ 1 ]
do
    read answer
    case $answer in
        "n" )
            return 0
            ;;
        "y" )
            echo -n "Which device contains the encrypted backup volume? [std. sdb1] "
            read device
            echo -n "Enter root "; suc "
            cryptsetup luksOpen /dev/${device:-sdb1} backup &&
            mount /dev/mapper/backup/ /backup &&
            rsnapshot $1 &&
            umount /backup &&
            cryptsetup luksClose backup" &&
            rm ~/.backup-$1
            return 0 ;;
        * )
            echo -n "Invalid input! Try again: "
            ;;
    esac
done
}

# Check if there are pending backups.
for interval in ${intervals[@]}
do
  if [[ -f ~/.backup-$interval || $1 = $interval ]]; then
      createBackup "$interval"
  fi
done

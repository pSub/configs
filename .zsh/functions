emulate -L zsh

unpack() {
    if [[ -f $1 ]] {
        case $1 in
            *.tar.bz2)  tar -xvjf           $1 ;;
            *.tar.gz)   tar -xvzf           $1 ;;
            *.rar)      unrar e             $1 ;;
            *.deb)      ar -x               $1 ;;
            *.bz2)      bzip2 -d            $1 ;;
            *.lzh)      lha x               $1 ;;
            *.gz)       gunzip -d           $1 ;;
            *.tar)      tar -xvf            $1 ;;
            *.tgz)      gunzip -d           $1 ;;
            *.tbz2)     tar -jxvf           $1 ;;
            *.zip)      unzip               $1 ;;
            *.tar.lzma) lzma -dk $1 --stdout | tar -xvf - ;;
            *.lzma)     lzma -dk            $1 ;;
            *.7z)       lzma -dk -S .7z     $1 ;;
            *)          echo "'$1' Error. Please go away" ;;
        esac
    } else {
        echo "'$1' is not a valid file"
    }
}

pack() {
    if [[ -n $2 ]] {
        case $2 in
            tgz | tar.gz)   tar -zcf$1.$2  $1 ;;
            tbz2 | tar.bz2) tar -jcf$1.$2  $1 ;;
            tar)            tar -cf$1.$2   $1 ;;
            gz | gzip)      gzip            $1 ;;
            bz2 | bzip2)    bzip2           $1 ;;
            zip)            zip -r $1.$2    $1 ;;
            7z)             lzma -zk -S .7z $1 ;; 
            lzma)           lzma -zk        $1 ;; 
            *)
                    echo "Usage:"
                    echo "pack FILE COMPRESSION"
                    echo "Supported compressions: tar(gz,bz2), gz, bz2, zip, 7z, lzma"
                    ;;
        esac
    } else {
        echo "Usage:"
        echo "pack FILE COMPRESSION"
        echo "Supported compressions: tar(gz,bz2), gz, bz2, zip, 7z, lzma"
    }
}

mcd() { mkdir -p "$@" && cd "$@" }

dcp() {
    if [[ -d $2 ]] {
        mkdir -p $2 && cp $1 $2
    } else {
        mkdir -p dirname $2 && cp $1 $2
    }
}

start restart stop reload(){ su --command="/etc/init.d/$1 $0" }

sync-unison(){ unison unison && unison all; }

hexeditor(){
    if [[ ! -f $1 ]] {
        touch $1
    }
    input=$1
    output=$2
    if [[ $# -eq 1 ]] {
        output=$1
    }
    xxd $input | vipe | xxd -r | sponge $output
}

greptodos(){
    find . -name $1 | xargs grep --no-filename -oE 'TODO:[^$]*' | sed s/TODO:/$2/ | combine - or ~/.todo.txt | sponge ~/.todo.txt
}

addExpense(){
  echo $1 >> $HOME/finances/$(date +"%Y-%m")/out
}

addRevenue(){
  echo $1 >> $HOME/finances/$(date +"%Y-%m")/in
}

showFinancialPosition(){
   totalIn=$(cat $HOME/finances/$(date +"%Y-%m")/in | awk -F ";" '{SUM += $2} END {print SUM}')
   totalOut=$(cat $HOME/finances/$(date +"%Y-%m")/out | awk -F ";" '{SUM += $2} END {print SUM}')
   total=$(($totalIn - $totalOut))
   printf "Revenues: %.2f\nExpenses: %.2f\nTotal:    %.2f\n" "$totalIn" "$totalOut" "$total"
}

